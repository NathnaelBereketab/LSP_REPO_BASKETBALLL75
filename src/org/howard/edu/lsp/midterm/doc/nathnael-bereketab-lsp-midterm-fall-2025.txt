Howard University
College of Engineering and Architecture
Department of Electrical Engineering & Computer Science

Large Scale Programming
Fall 2025


Midterm Exam
October 20, 2025


Instructions
* Exam Format:
Your examination consists of both essay and programming problems.
* Essay Questions:
Complete all essay (rationale) questions inline in this document.
My preference is Microsoft Word (.docx), but .txt or .pdf are acceptable alternatives.
Upload your completed essay file to your repository under the package:
org.howard.edu.lsp.midterm.doc
You may use any file name.
* Programming Problems:
Each programming problem must be uploaded to your repository using the package specified in the question.
For example:
org.howard.edu.lsp.midterm.question1
* Committing Your Work:
If using a third-party IDE or tool to commit, commit early and often.
Do not wait until the end of the exam to push your code.
If you encounter problems committing, you may manually upload your code to your repository.
If you are unable to commit or upload, you may zip your project and email it to
bwoolfolk@whiteboardfederal.com.
?? This will result in a 20% deduction from your final exam score.
* Citations and References:
You must cite all references for any material obtained from the internet.
Any AI-generated content (e.g., ChatGPT conversations) must be included in full.
Each package you upload must include a references document corresponding to that package's content.
?? Failure to provide references will result in a zero for that question.
* Exam Policy:
This is an OPEN BOOK, OPEN NOTES exam.
Collaboration of any kind is strictly prohibited.  Any violations will be handled in accordance with university academic integrity guidelines.


Question 1. (20 pts.)
Given the following, analyze the class below and answer the below questions.  This question does NOT require you to write any code.


package org.howard.edu.lsp.studentPortalHelper;

import java.io.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class StudentPortalHelper {
  // Data cache (in-memory)
  private static final Map<String, String> cache = new HashMap<>();

  // GPA calculation
  public static double computeGPA(List<Integer> grades) {
    if (grades == null || grades.isEmpty()) return 0.0;
    int sum = 0;
    int count = 0;
    for (int g : grades) { sum += g; count++; }
    double avg = (double) sum / count;
    // simple mapping: 90-100=A=4, 80-89=B=3, etc.
    if (avg >= 90) return 4.0;
    if (avg >= 80) return 3.0;
    if (avg >= 70) return 2.0;
    if (avg >= 60) return 1.0;
    return 0.0;
  }

  // CSV export to disk
  public static void exportRosterToCsv(String filename, List<String> names) {
    try (PrintWriter pw = new PrintWriter(new FileWriter(filename))) {
      pw.println("name");
      for (String n : names) {
        pw.println(n);
      }
    } catch (IOException e) {
      System.err.println("Failed to export roster: " + e.getMessage());
    }
  }

  // Email formatting
  public static String makeWelcomeEmail(String studentName) {
    return "Welcome " + studentName + "! Please visit the portal to update your profile.";
  }

  // Date formatting (UI concern)
  public static String formatDateForUi(LocalDate date) {
    return date.format(DateTimeFormatter.ofPattern("MM/dd/yyyy"));
  }

  // Payment processing (stub)
  public static boolean processTuitionPayment(String studentId, double amount) {
    if (amount <= 0) return false;
    // pretend to call external gateway...
    return true;
  }

  // Password strength check (security)
  public static boolean isStrongPassword(String pwd) {
    if (pwd == null || pwd.length() < 8) return false;
    boolean hasDigit = false, hasUpper = false;
    for (char c : pwd.toCharArray()) {
      if (Character.isDigit(c)) hasDigit = true;
      if (Character.isUpperCase(c)) hasUpper = true;
    }
    return hasDigit && hasUpper;
  }

  // Ad-hoc caching
  public static void putCache(String key, String value) {
    cache.put(key, value);
  }

  public static String getCache(String key) {
    return cache.get(key);
  }
}





Tasks:
Using one or more Arthur Riel heuristics, analyze whether the StudentPortalHelper class demonstrates high or low cohesion.
a) Should a well-designed class have high or low cohesion?  Explain and defend your answer.  (5 pts.)


**A well-designed class should have high cohesion.** 
High cohesion means that all methods and data within a class are closely related and work together toward a single, well-defined purpose. 
According to Arthur Riel's heuristics, particularly "A class should capture one and only one key abstraction," high cohesion leads to classes that are easier to understand, maintain, test, and reuse. 
When a class has high cohesion, changes to one part of the system are less likely to require changes across multiple unrelated areas. 
Low cohesion, in contrast, indicates that a class is trying to do too many unrelated things, which violates the Single Responsibility Principle and makes the code harder to maintain and more prone to bugs.



b) Based on your analysis, discuss-only if you believe changes are needed-how you would reorganize or redesign the class to improve its structure. Your answer should (1) identify the class as having high, low or perfect cohesion and (2) describe a general approach to refactoring the class.  If you believe the class already has good cohesion, justify why no changes are necessary. (15 pts)
(If you believe the class already has good cohesion, justify why no changes are necessary.)
**The StudentPortalHelper class demonstrates low cohesion.** 
Using Arthur Riel's heuristics, specifically "A class should capture one and only one key abstraction" and "Most of the methods defined on a class should be using most of the data members most of the time," we can see that this class violates these principles. 
The class attempts to handle multiple unrelated responsibilities including academic calculations (GPA computation), file I/O operations (CSV export), email formatting (welcome messages), UI concerns (date formatting), payment processing (tuition payments), security validation (password strength), and caching infrastructure (ad-hoc cache management). 
These methods share no common data, with the cache being used by only two methods, and they operate independently while serving completely different purposes. 
This is a classic example of a "utility class" or "God class" that has become a dumping ground for miscellaneous functionality. 

**To improve cohesion, I would decompose this single class into multiple focused classes, each with a single, clear responsibility.** 
First, I would create a GradeCalculator class to handle GPA computation and grade-related calculations. 
Second, a RosterExporter class would manage CSV export and file operations for student rosters. 
Third, an EmailService class would handle email formatting and message generation. 
Fourth, a DateFormatter class would manage date formatting for UI display. 
Fifth, a PaymentProcessor class would handle tuition payment processing. 
Sixth, a PasswordValidator class would manage password strength validation and security checks. 
Finally, a CacheManager class would provide caching infrastructure with proper cache operations. 
Each of these classes would have high cohesion because all methods within each class would work with related data and serve a unified purpose. 
For example, GradeCalculator might eventually include methods for calculating semester GPA, cumulative GPA, grade distributions, and other metrics all related to academic performance. 
The CacheManager could be implemented as a proper generic cache with methods for put, get, clear, size, and other cache operations, rather than the current ad-hoc two-method approach. 
This refactoring would make the codebase more maintainable, testable, and extensible, as each class would have a clear single responsibility and high internal cohesion.

Question 2. (20 pts.)

Write a class AreaCalculator in the package org.howard.edu.lsp.midterm.question2 with the following overloaded methods:  This should be uploaded to your repo.

// Circle area
public static double area(double radius)

// Rectangle area
public static double area(double width, double height)

// Triangle (base & height) area
public static double area(int base, int height)

// Square (side length) area
public static double area(int side)

Requirements:
Each method should compute and return the correct area.
* Circle area: p (use class Math.PI) � r�
* Rectangle area: width � height
* Triangle area: 1/2 � base � height
* Square area: side�
* For all methods: throw an IllegalArgumentException if any dimension is = 0.

Create a class named Main that invokes each overloaded method statically to produce exactly the following output:

Circle radius 3.0 ? area = 28.274333882308138
Rectangle 5.0 x 2.0 ? area = 10.0
Triangle base 10, height 6 ? area = 30.0
Square side 4 ? area = 16.0

Finally, invoke at least one of the area methods with a value that causes an IllegalArgumentException to be thrown.
* Catch the exception using a try/catch block.
* Print an error message to System.out. (Any message is fine.)
Briefly (2-3 sentences as a comment in class Main) explain if overloading or simply use methods with different names, i.e., rectactangleArea, circleArea, etc.. 


Category
Description
Points
1. Implementation
Correct use of method overloading (same name, different signatures), correct formulas, and proper exception handling in each method.
10
2. Program Behavior
Main correctly invokes all methods statically, produces the required output exactly, and includes a working exception demonstration.
6
3. Conceptual Understanding
Brief explanation of why or why not overloading is the better design choice.
4


Question 3. 
Given the following, answer the below questions.
(20 pts.)
        
Given:    
A car manufacturer uses Java software to track current vehicles being built. The UML diagram below shows an excerpt of the current software structure. You should assume the presence of other appropriate fields and methods








Each car can be built to one of three trim levels: Base, Luxury or Sport. They can also be configured with an electric or petrol engine. At various points in the manufacturing process the customer can choose to change the trim level. 

Task:
a) Explain in detail why the current structure does or does not support this. (10 pts.)

**The current structure does not support dynamic trim-level changes during the manufacturing process.** 
This design uses class inheritance to represent trim levels (Base, Sports, Luxury), which means the trim level is determined at compile-time when a car object is instantiated as a specific subclass (e.g., new Sports() or new Luxury()). 
Once a car object is created as an instance of a particular trim class, its type is fixed and cannot be changed at runtime. 
If a customer wants to switch from a Base trim to a Luxury trim during manufacturing, the current system would require creating an entirely new object of the Luxury class and somehow transferring all the state information from the old Base object to the new one, which is cumbersome, error-prone, and defeats the purpose of tracking a single vehicle throughout its manufacturing lifecycle. 

Furthermore, the inheritance hierarchy creates a rigid, inflexible structure. 
The trim level is encoded into the class identity itself through the "is-a" relationship, meaning a Base car "is-a" Car, and it will always be a Base car. 
Java does not support changing an object's class at runtime, so there is no way to convert a Base instance into a Sports or Luxury instance without creating a new object entirely. 
This violates the principle that behavior should be changeable without changing identity. 
Additionally, if the system also needs to support engine type changes (Electric vs Petrol), the current parallel inheritance hierarchies would create a combinatorial explosion problem where you'd need separate classes for every combination (BaseElectric, BasePetrol, SportsElectric, SportsPetrol, LuxuryElectric, LuxuryPetrol), making the design unmaintainable and violating the Open/Closed Principle.

b) Describe how to refactor the structure to allow trim-level change for a car to dynamically change.  Hint: How would you modify Car to use composition to solve the problem? (10 pts.)

**To refactor this structure and support dynamic trim-level changes, I would replace the inheritance-based approach with a composition-based design using the Strategy pattern.** 
Instead of having Base, Sports, and Luxury as subclasses of Car, I would create a TrimLevel interface (or abstract class) that defines the behavior associated with trim levels, such as getFeatures(), getPrice(), or other trim-specific operations. 
Then, I would create concrete implementations of this interface: BaseTrim, SportsTrim, and LuxuryTrim. 
The Car class would have a private instance variable of type TrimLevel (e.g., private TrimLevel trimLevel;) and a setter method setTrimLevel(TrimLevel newTrim) that allows the trim level to be changed at runtime. 

Similarly, for the engine type, I would create an Engine interface with concrete implementations ElectricEngine and PetrolEngine, and the Car class would contain a private Engine instance variable with an appropriate setter method. 
The Car class would then delegate trim-specific and engine-specific behavior to these composed objects. 
For example, the getTrimLevel() method in Car might return trimLevel.getName(), and engine-related methods would delegate to the engine object. 
This composition-based approach follows the principle of "favor composition over inheritance" and provides the flexibility to change both trim level and engine type dynamically during the manufacturing process. 
When a customer requests a trim change, the system simply calls car.setTrimLevel(new LuxuryTrim()) without creating a new Car object, preserving the car's identity and all its other state information throughout the manufacturing lifecycle. 
This design is more maintainable, extensible, and adheres to SOLID principles, particularly the Open/Closed Principle, as new trim levels or engine types can be added without modifying existing code.

Question 4. (30 pts.)

Design and implement a small smart-campus device system showing both class inheritance (concrete classes extend a common abstract class) and interface implementation.

1) Abstract Base Class - Device
The following Device class is partially implemented for you.
You must not modify this code, but you will use it in your subclasses:

package org.howard.edu.lsp.midterm.question4;

public abstract class Device {
  private String id;
  private String location;
  private long lastHeartbeatEpochSeconds;
  private boolean connected;

  // PROVIDED CONSTRUCTOR
  public Device(String id, String location) {
    if (id == null || id.isEmpty() || location == null || location.isEmpty()) {
      throw new IllegalArgumentException("Invalid id or location");
    }
    this.id = id;
    this.location = location;
    this.lastHeartbeatEpochSeconds = 0;
    this.connected = false;
  }

  public String getId() {
    return id;
  }

  public String getLocation() {
    return location;
  }



  public long getLastHeartbeatEpochSeconds() {
    return lastHeartbeatEpochSeconds;
  }

  public boolean isConnected() {
    return connected;
  }

  protected void setConnected(boolean connected) {
    this.connected = connected;
  }

  public void heartbeat() {
    this.lastHeartbeatEpochSeconds = System.currentTimeMillis() / 1000;
  }

  public abstract String getStatus();
}

You will extend this class in your DoorLock, Thermostat, and Camera implementations.
All subclasses must call super(id, location) in their constructors.

2) Capability Interfaces (behaviors only)
Networked

void connect();
void disconnect();
boolean isConnected();

Behavior:
* connect() brings the device online by setting connected = true.
* disconnect() sets connected = false.
* isConnected() reports the current connection state.
(Concrete classes may satisfy this using Device's protected setter and public getter.)

BatteryPowered

int getBatteryPercent();      // 0..100
void setBatteryPercent(int percent);

Behavior:
* getBatteryPercent() returns current battery %.
* setBatteryPercent(int) updates it; throw IllegalArgumentException if outside 0..100 inclusive.

3) Concrete Devices (must extend Device and implement interfaces)
All fields must be private. Implement methods exactly as specified.

A) DoorLock - extends Device, implements Networked, BatteryPowered
Private fields

private int batteryPercent;

Constructor
public DoorLock(String id, String location, int initialBattery)

* Call super(id, location).
* Initialize battery by calling setBatteryPercent(initialBattery) (enforces 0..100).


Implemented methods

// Networked
@Override public void connect()    { setConnected(true);  }
@Override public void disconnect() { setConnected(false); }
@Override public boolean isConnected() { return super.isConnected(); }

// BatteryPowered
@Override public int getBatteryPercent() { return batteryPercent; }
@Override public void setBatteryPercent(int percent) {
  if (percent < 0 || percent > 100) throw new IllegalArgumentException("battery 0..100");
  this.batteryPercent = percent;
}

// Status
@Override public String getStatus() {
  String connStatus = isConnected() ? "up" : "down";
  return "DoorLock[id=" + getId() + ", loc=" + getLocation() +
         ", conn=" + connStatus + ", batt=" + batteryPercent + "%]";
}

B) Thermostat - extends Device, implements Networked
Private fields

private double temperatureC;

Constructor
public Thermostat(String id, String location, double initialTempC)

* Call super(id, location).
* Initialize temperatureC to initialTempC.

Accessors

public double getTemperatureC();
public void setTemperatureC(double temperatureC);

Implemented methods

// Networked
@Override public void connect()    { setConnected(true);  }
@Override public void disconnect() { setConnected(false); }
@Override public boolean isConnected() { return super.isConnected(); }

// Status
@Override public String getStatus() {
  String connStatus = isConnected() ? "up" : "down";
  return "Thermostat[id=" + getId() + ", loc=" + getLocation() +
         ", conn=" + connStatus + ", tempC=" + temperatureC + "]";
}

C) Camera - extends Device, implements Networked, BatteryPowered

Private fields
private int batteryPercent;

Constructor

public Camera(String id, String location, int initialBattery)

* Call super(id, location).
* Initialize battery by calling setBatteryPercent(initialBattery).




Implemented methods

// Networked
@Override public void connect()    { setConnected(true);  }
@Override public void disconnect() { setConnected(false); }
@Override public boolean isConnected() { return super.isConnected(); }

// BatteryPowered
@Override public int getBatteryPercent() { return batteryPercent; }
@Override public void setBatteryPercent(int percent) {
  if (percent < 0 || percent > 100) throw new IllegalArgumentException("battery 0..100");
  this.batteryPercent = percent;
}

// Status
@Override public String getStatus() {
  String connStatus = isConnected() ? "up" : "down";
  return "Camera[id=" + getId() + ", loc=" + getLocation() +
         ", conn=" + connStatus + ", batt=" + batteryPercent + "%]";
}

4) Provided Driver

Do not modify this file. Your classes must compile and run with it unchanged.


package org.howard.edu.lsp.midterm.question4;

import java.util.*;

public class Main {
  public static void main(String[] args) {
    Device lock   = new DoorLock("DL-101", "DormA-1F", 85);
    Device thermo = new Thermostat("TH-202", "Library-2F", 21.5);
    Device cam    = new Camera("CA-303", "Quad-North", 72);

    // === Invalid battery test ===
    System.out.println("\n== Exception test ==");
    try {
      Device badCam = new Camera("CA-404", "Test-Lab", -5);
      System.out.println("ERROR: Exception was not thrown for invalid battery!");
    } catch (IllegalArgumentException e) {
      System.out.println("Caught expected exception: " + e.getMessage());
    }

    // === Heartbeat demonstration ===
    System.out.println("\n== Heartbeat timestamps BEFORE ==");
    for (Device d : Arrays.asList(lock, thermo, cam)) {
      System.out.println(d.getId() + " lastHeartbeat=" + d.getLastHeartbeatEpochSeconds());
    }

    lock.heartbeat();
    thermo.heartbeat();
    cam.heartbeat();

    System.out.println("\n== Heartbeat timestamps AFTER ==");
    for (Device d : Arrays.asList(lock, thermo, cam)) {
      System.out.println(d.getId() + " lastHeartbeat=" + d.getLastHeartbeatEpochSeconds());
    }

    // === Base-class polymorphism ===
    List<Device> devices = Arrays.asList(lock, thermo, cam);
    System.out.println("\n== Initial status via Device ==");
    for (Device d : devices) {
      System.out.println(d.getStatus());
    }

    // === Interface polymorphism: Networked ===
    System.out.println("\n== Connect all Networked ==");
    for (Device d : devices) {
      if (d instanceof Networked) {
        ((Networked) d).connect();
      }
    }

    // === Interface polymorphism: BatteryPowered ===
    System.out.println("\n== Battery report (BatteryPowered) ==");
    for (Device d : devices) {
      if (d instanceof BatteryPowered) {
        BatteryPowered bp = (BatteryPowered) d;
        System.out.println(d.getClass().getSimpleName() + " battery = " + bp.getBatteryPercent() + "%");
      }
    }

    // === Final status check ===
    System.out.println("\n== Updated status via Device ==");
    for (Device d : devices) {
      System.out.println(d.getStatus());
    }
  }
}

5) Brief Rationale (2-4 sentences)  (Also solved in Rationale.txt)


* Why is Device defined as an abstract class? 

Device is defined as an abstract class because it provides common functionality (id, location, heartbeat, connection status) that all smart campus devices share, 
while requiring each concrete device to implement its own specific getStatus() method. 
This follows the template method pattern where common behavior is defined in the abstract class, 
but specific behavior is left to subclasses.

* How do the Networked and BatteryPowered interfaces add behavior to your concrete classes?

The Networked and BatteryPowered interfaces add specific capabilities to devices through interface implementation. 
Networked devices can connect/disconnect and report connection status, while BatteryPowered devices can manage battery levels. 
This allows for flexible composition where devices can have different combinations of capabilities (DoorLock and Camera have both, 
Thermostat only has Networked).

* Is this design an example of multiple inheritance in Java? Explain why or why not.

No, this is not multiple inheritance. Java only supports single inheritance for classes (Device is the only parent class), 
but it supports multiple interface implementation. The concrete classes extend one abstract class (Device) 
and implement multiple interfaces (Networked, BatteryPowered). This is interface-based composition, not multiple inheritance, 
which allows for flexible behavior without the complexity of true multiple inheritance.


Grading (30 pts)


Category
Description
Points
Implementation
Correct use of inheritance and interfaces; meets all required method signatures and behaviors; uses the provided Device constructor; correctly implements Networked and BatteryPowered; uses setConnected(boolean) properly; validates inputs.
15
Program Behavior
Code compiles and runs with the provided Main.java unchanged; heartbeat behavior works; base-class and interface polymorphism demonstrated; exception thrown for invalid battery input; getStatus() output matches required formats.
9
Rationale
Clear, thoughtful, and specific answers to the four questions above. References to the student's own code are present. Shows conceptual understanding of abstraction, interface-based behavior, and multiple inheritance in Java.
6


Question 5 (10 pts)
Reflection on AI Use in Learning and Problem Solving
Discuss your personal experience using AI tools (such as ChatGPT, GitHub Copilot, or others) before and during this course.
In your response, address the following points:
1. How have you used AI to support your learning or programming in this course?
2. What benefits or limitations did you encounter?
3. Looking ahead, how do you expect AI to influence the way you solve problems academically or professionally?
Your answer should be 1-2 well-developed paragraphs.

Solved under Question 5 folder.




































